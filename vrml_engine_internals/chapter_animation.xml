<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "/usr/share/sgml/docbook/dtd/xml/4.4/docbookx.dtd">

<chapter id="chapter.animation">
<title>Animation</title>

<!-- Source units: CastleSceneCore for events -->

<para>There are two approaches to playing a 3D animation in our engine.
They both use <literal>TCastleScene</literal> for playback,
start the animation by calling <literal>TCastleScene.PlayAnimation</literal>
or setting <literal>TCastleScene.AutoAnimation</literal>.</para>

<section id="section.animation_interactive">
<title>Interactive (glTF, X3D, VRML, Spine...)</title>

<para>This approach means that you load one model file, and the
<literal>TCastleScene</literal> (actually, ancestor
<literal>TCastleSceneCore</literal>)
will make the events work, sending/receiving events through routes,
activating sensors, running scripts etc. Among many things,
this means that world time will be passed to <literal>TimeSensor</literal> nodes,
allowing you to animate by interpolator nodes.
You can also pass user input to <literal>TCastleSceneCore</literal>
methods like <literal>TCastleSceneCore.KeyDown</literal>,
and then the user will be able to fully interact with the VRML scene.</para>

<para>This is what should be used for presenting interactive X3D / VRML
world to the user, as envisioned by X3D / VRML specifications.</para>

<section>
<title>3D formats support</title>

<para>This plays animations from:</para>

<itemizedlist>
  <listitem><para>glTF,</para></listitem>
  <listitem><para>X3D,</para></listitem>
  <listitem><para>VRML,</para></listitem>
  <listitem><para>Spine JSON,</para></listitem>
  <listitem><para>sprite sheets (from .castle-sprite-sheet, Starling, Cocos2d formats)</para></listitem>
</itemizedlist>

</section>
</section>

<section id="section.animation_precalculated">
<title>Non-interactive precalculated animation</title>

<para>This approach means that at loading time we "fix" the whole the animation.
Animation becomes something like a 3D movie.</para>

<para>A downside is that loading time (and other resources usage, like memory)
is larger, especially for longer animations. That's because we
store the whole animation in memory.</para>

<para><emphasis>Huge advantage of this method: once loaded,
animation can be played ultra-fast</emphasis>.
Actually, it's as fast a displaying a still model (currently, this is exactly
what is done under the hood: at each time, we simply display one chosen frame of
animation; in the future this may change, but still will be lighting
fast). That's the reward for long loading time and "fixing" the animation.</para>

<para>We generally do not recommend this method anymore.</para>

<section id="section.animation_3d_formats">
<title>3D formats support</title>

<itemizedlist>
  <listitem><para><emphasis><ulink url="https://castle-engine.io/castle_animation_frames.php">castle-anim-frames
    (Castle Game Engine animations)</ulink></emphasis> format was
    specifically created to describe precalculated animations.</para></listitem>

  <listitem><para>We also load <emphasis>MD3 (Quake3 engine)</emphasis>
    animations to this form, as they are especially suitable for it.</para></listitem>
</itemizedlist>
</section>

<section id="section.structural_equality">
<title>Structural equality</title>

<para><literal>TNodeInterpolator</literal> class is used to build
and render precalculated animations.
For each provided frame we have an associated time.
The resulting animation will change the first model to the last one,
such that at any time point we will either use one of the predefined models
(if point in time is close to the model's associated time) or a new
model created by interpolating between two successive models in time.</para>

<para>Under the hood, we have quite intelligent algorithm that checks
each pair of two successive models for <emphasis>structural equality</emphasis>.
<quote>Structural equality</quote> simply means that the two models
are equal, with the exception of various floating-point fields,
on which they may differ. The idea is that we can define <emphasis>linear
interpolation</emphasis> between two models that are structurally equal.
So when you specify two structurally equal models for an animation,
we can generate many intermediate scenes (this is
the <literal>ScenesPerTime</literal>
parameter to loading method) that smoothly show one model changing into
the other. This can interpolate any floating-point field value, like
<literal>SFColor</literal>,
<literal>SFFloat</literal>, <literal>SFMatrix</literal>,
<literal>SFRotation</literal>, <literal>SFVec2f</literal> and
<literal>SFVec3f</literal> an all equivalent multi-valued fields
(they can differ in values, but still must have the same number of items).</para>

<para>For example, the first model may be a small sphere with blue color,
and the second model may be a larger sphere with white color.
The resulting animation depicts a growing sphere with color fading
from blue to white. More examples:</para>

<itemizedlist>
  <listitem><para>Moving, rotating, scaling objects may be expressed
    by changing transformation values.</para></listitem>

  <listitem><para>Any kind of morphing (mesh deformation) may
    be expressed by changing values of <literal>IndexedFaceSet</literal>
    coordinates.</para></listitem>

  <listitem><para>Materials, colors, lights may change.
    Even such properties like a material transparency,
    or a light position or direction.</para></listitem>

  <listitem><para>Texture coordinates may change to achieve
    effects like a moving water surface.</para></listitem>
</itemizedlist>

<para>Another advantage of structural equality is that we will perform
aggressive merging of two structurally equal models. This means that
when two nodes are detected to be <emphasis>exactly equal</emphasis>, one of them will be removed
(and pointers rearranged to both point to the same node in memory).
If the nodes are not exactly equal, we still check their children and possibly
merge them. This is a huge saving in terms of memory, as practically
all the non-animated parts of the model will only be kept once in memory.
It's implemented quite intelligently, so it's actually a relatively fast
process done during the model loading.</para>

<para>All the models of the animation do not actually have to be structurally
equal. You can even change one model into something completely different.
But in these cases we cannot generate smooth transition from one model to the other,
and the animation will just show a sudden change into new version
at it's time.</para>

<para>If you're concerned that possibly some parts of your animation
are not structurally equal, you can always load them into
<ulink url="https://castle-engine.io/view3dscene.php">view3dscene</ulink>
run with <literal>--debug-log</literal> command-line option.
Then, at loading time, you will get messages on console if two
successive models were not detected as structurally equal
(and so a sharp change from one to the other will be shown in animation).
The message will also describe exactly where the difference is found.</para>

<!-- This sentence is so obvious that I don't know where to put it...
     <para>Every animation may be played backwards and/or in a loop.</para> -->
</section>

<section id="section.generating_intermediate_scenes">
<title>Generating intermediate scenes</title>

<para>First of all, the scenes are <emphasis>not interpolated when
rendering</emphasis>. Instead, at loading time, we create
a number of new interpolated models and save them
(along with the models that were specified explicitly).
The parameter <literal>ScenesPerTime</literal>
says with what granularity the intermediate scenes
are constructed for a time unit.</para>

<para>If you specify too large
<literal>ScenesPerTime</literal> your animations will take a lot
of time to prepare and will require a lot of memory.
On the other hand too small <literal>ScenesPerTime</literal> value will
result in an unpleasant jagged animation. Ideally, <literal>ScenesPerTime</literal>
should be &gt;= than the number of frames you will render in your time unit,
but this is usually way too large value.</para>

<para>Special value of <literal>0</literal> for <literal>ScenesPerTime</literal>
means that you want only the explicitly passed nodes in the scene,
nothing more. No more intermediate scenes will ever be created.
This creates a trivial animation that suddenly jumps from
one still model to the next at specified times. It may be useful if you
already have generated a lot of models, densely distributed
over time, and you don't need <literal>TNodeInterpolator</literal> to insert any more
scenes. <emphasis>Structural equality</emphasis> (or it's lack)
doesn't change the look of such animation, as no additional interpolation is done
when loading, but still structurally equal models may be merged
to conserve memory use.</para>

<para>Internally, the <literal>TNodeInterpolator</literal> wraps
each model (that was specified explicitly or created by interpolation)
in a new node.
This means that we have all the features
of our static OpenGL rendering available when doing animations too.
</para>
</section>

<section id="section.kanim">
<title>Storing precalculated animations in castle-anim-frames files</title>

<para>We have a special file format to express precalculated animations:
<ulink url="https://castle-engine.io/castle_animation_frames.php">castle-anim-frames,
Castle Game Engine animations</ulink>. It references a number of
static 3D model files and their corresponding times, describing
the animation.</para>

<para>If you want to experiment with castle-anim-frames format,
<ulink url="https://castle-engine.io/view3dscene.php">view3dscene</ulink>
can load and play animations in castle-anim-frames format.
You can find example castle-anim-frames animations in
<ulink url="https://castle-engine.io/demo_models.php">VRML/X3D demo models</ulink>
(see directory <literal>castle-anim-frames/</literal>),
the sources of our engine also contain simple examples in
directory <filename>castle_game_engine/examples/</filename>
(like <literal>resource_animations</literal> that plays animations
specified in <literal>resource.xml</literal> files for game creatures/items).
Also <ulink url="https://castle-engine.io/castle.php"><quote>The
Castle</quote></ulink> uses such animations for all creatures and weapons.</para>

<para>In general, using a single glTF, X3D, VRML, Spine file
is a much better approach than castle-anim-frames files.</para>

<para>Also, castle-anim-frames files may waste a lot of disk space if
your animation tries to change two pieces of your model
with drastically different speeds. Consider this:</para>

<orderedlist>
  <listitem><para>It's OK to create an animation
    with a box that blinks (changes color) 100 times per time unit.
    Just 2 model files are needed for this, with castle-anim-frames file specifying
    to loop them over a short period of time.</para></listitem>

  <listitem><para>It's also OK to create an animation
    with a sphere that blinks only once for a given time unit.</para></listitem>

  <listitem><para>But if you want to create an animation that contains
    both the box (blinking 100 times/time unit) and the sphere
    (blinking once for a time unit), you will have to prepare
    100 still 3D files to express this!</para></listitem>
</orderedlist>

<para>VRML interpolators don't have this problem, since every interpolator
has it's own set of keys. So both can be placed within the same file,
without the need to explicitly write 100 values anywhere.</para>

<para>Despite this, there remains <emphasis>one practical advantage
of using castle-anim-frames file format</emphasis>:
you can design your animations using any authoring software
that can export static VRML files. If your modeler
can design animations, but doesn't save them to VRML interpolator
nodes, all you have to do is to export your models a couple of times
from a couple of different points in time.</para>

<para>In the old days, this allowed us to use <ulink url="http://www.blender3d.org/">Blender</ulink>
do design animations and export them.
Nowadays, we export from Blender to glTF using standard Blender exporter,
and there's no need for castle-anim-frames.</para>

</section>
</section>

</chapter>

<!--
  Local Variables:
  ispell-local-dictionary: "american"
  End:
-->
